package net.ccbluex.liquidbounce.features.module.modules.misc

import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.utils.client.chat
import net.minecraft.entity.player.EntityPlayer
import net.minecraft.util.AxisAlignedBB
import kotlin.math.sqrt

object Anticheat : Module("Anticheat", Category.MISC) {

    private val flagged = mutableSetOf<String>()
    private val flagCooldowns = mutableMapOf<String, Long>()
    private val playerStates = mutableMapOf<String, PlayerState>()

    private data class PlayerState(
        var lastPosX: Double,
        var lastPosY: Double,
        var lastPosZ: Double,
        var lastOnGroundTime: Long
    )

    private val FLAG_COOLDOWN_MS = 3000L // 3초 간격으로 같은 이유 중복 플래그 방지

    val onUpdate = handler<UpdateEvent> {
        val self = mc.thePlayer ?: return@handler
        val now = System.currentTimeMillis()

        for (entity in mc.theWorld.playerEntities) {
            if (entity !is EntityPlayer || entity.name == self.name) continue

            val dx = entity.posX - entity.prevPosX
            val dz = entity.posZ - entity.prevPosZ
            val dy = entity.posY - entity.prevPosY

            val horizontalSpeed = sqrt(dx * dx + dz * dz)
            val name = entity.name

            // --- Speed Check (완화) ---
            if (horizontalSpeed > 0.7) {
                flag(name, "Speed (${horizontalSpeed.to3f()} blocks/tick)", now)
            }

            // --- Step Check (완화) ---
            if (dy > 1.3) {
                flag(name, "Step (${dy.to3f()} blocks)", now)
            }

            // --- Fly Check (보강) ---
            val state = playerStates[name]
            if (!entity.onGround && entity.motionY == 0.0 && entity.fallDistance == 0f && !entity.isInWater) {
                if (state != null && now - state.lastOnGroundTime > 1500) { // 1.5초로 조정
                    flag(name, "Fly (air-time > 1.5s)", now)
                }
            }

            // --- NoSlow Check (완화) ---
            if (entity.isUsingItem && horizontalSpeed > 0.3) {
                flag(name, "NoSlow (${horizontalSpeed.to3f()})", now)
            }

            // --- Scaffold Check (조건 보강) ---
            val below = mc.theWorld.getBlockState(entity.position.down()).block
            if (entity.motionY > 0 && below.isFullBlock && entity.isSwingInProgress && entity.swingProgress > 0.4f) {
                flag(name, "Scaffold", now)
            }

            // --- AutoBlock Check ---
            if (entity.isBlocking && entity.swingProgress > 0.8f) {
                flag(name, "AutoBlock", now)
            }

            // --- 상태 업데이트 ---
            playerStates[name] = PlayerState(
                entity.posX, entity.posY, entity.posZ,
                if (entity.onGround) now else playerStates[name]?.lastOnGroundTime ?: now
            )
        }
    }

    private fun flag(name: String, reason: String, now: Long) {
        val key = "$name:$reason"
        val lastFlagTime = flagCooldowns[key] ?: 0L
        if (now - lastFlagTime < FLAG_COOLDOWN_MS) return

        flagged.add(key)
        flagCooldowns[key] = now
        chat("§8[§cShadeAC§8] §7$name §fis flagged for §c$reason")
    }

    private fun Double.to3f(): String = String.format("%.3f", this)
}
